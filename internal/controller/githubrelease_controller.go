package controller

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/joho/godotenv"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	grmv1alpha1 "csye7125.local/cve-operator/api/v1alpha1"
)

// GithubReleaseReconciler reconciles a GithubRelease object
type GithubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleases/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO: Modify the Reconcile function to compare the state specified by
// the GithubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GithubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx)

	err := godotenv.Load()
	if err != nil {
		l.Error(err, "Error loading env")
	}

	var instance grmv1alpha1.GithubRelease
	err = r.Get(ctx, req.NamespacedName, &instance)
	if err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Handle finalizer logic
	finalizerName := "grm.csye7125.local/finalizer"
	if instance.ObjectMeta.DeletionTimestamp.IsZero() {
		if !containsString(instance.ObjectMeta.Finalizers, finalizerName) {
			instance.ObjectMeta.Finalizers = append(instance.ObjectMeta.Finalizers, finalizerName)
			if err := r.Update(ctx, &instance); err != nil {
				l.Error(err, "unable to update GithubRelease")
				return ctrl.Result{}, err
			}
		}
	} else {
		if containsString(instance.ObjectMeta.Finalizers, finalizerName) {
			if err := r.cleanupExternalResources(&instance); err != nil {
				l.Error(err, "unable to cleanup external resources")
				return ctrl.Result{}, err
			}
			instance.ObjectMeta.Finalizers = removeString(instance.ObjectMeta.Finalizers, finalizerName)
			if err := r.Update(ctx, &instance); err != nil {
				l.Error(err, "unable to update GithubRelease")
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	// Create a job if we have a URL and no existing successful job
	if instance.Spec.URL != "" {
		jobName := fmt.Sprintf("%s-job", instance.Name)
		var job batchv1.Job
		err = r.Get(ctx, client.ObjectKey{Namespace: instance.Namespace, Name: jobName}, &job)
		if err != nil && client.IgnoreNotFound(err) != nil {
			l.Error(err, "unable to get job")
			return ctrl.Result{}, err
		}

		// Check if the job exists and is successful
		if job.Status.Succeeded == 0 {
			job := &batchv1.Job{
				ObjectMeta: metav1.ObjectMeta{
					Name:      jobName,
					Namespace: instance.Namespace,
				},
				Spec: batchv1.JobSpec{
					Template: corev1.PodTemplateSpec{
						ObjectMeta: metav1.ObjectMeta{
							Labels: map[string]string{
								"app": os.Getenv("APP_LABEL"),
							},
						},
						Spec: corev1.PodSpec{
							Containers: []corev1.Container{
								{
									Name:            "release-processor-job",
									Image:           os.Getenv("IMAGE") + ":" + os.Getenv("TAG"),
									ImagePullPolicy: corev1.PullAlways,
									Env: []corev1.EnvVar{
										{
											Name:  "FILEURL",
											Value: instance.Spec.URL,
										},
										{
											Name:  "BROKERS",
											Value: os.Getenv("BROKERS"),
										},
										{
											Name:  "TOPIC",
											Value: os.Getenv("TOPIC"),
										},
									},
									Resources: corev1.ResourceRequirements{
										Requests: corev1.ResourceList{
											corev1.ResourceCPU:    resource.MustParse(os.Getenv("CPU_REQUEST")),
											corev1.ResourceMemory: resource.MustParse(os.Getenv("MEMORY_REQUEST")),
										},
										Limits: corev1.ResourceList{
											corev1.ResourceCPU:    resource.MustParse(os.Getenv("CPU_LIMIT")),
											corev1.ResourceMemory: resource.MustParse(os.Getenv("MEMORY_LIMIT")),
										},
									},
								},
							},
							RestartPolicy: corev1.RestartPolicyOnFailure,
							ImagePullSecrets: []corev1.LocalObjectReference{
								{
									Name: os.Getenv("IMAGEPULLSECRETS"),
								},
							},
							Affinity: &corev1.Affinity{
								PodAntiAffinity: &corev1.PodAntiAffinity{
									PreferredDuringSchedulingIgnoredDuringExecution: []corev1.WeightedPodAffinityTerm{
										{
											Weight: 100,
											PodAffinityTerm: corev1.PodAffinityTerm{
												LabelSelector: &metav1.LabelSelector{
													MatchLabels: map[string]string{
														"app": os.Getenv("APP_LABEL"),
													},
												},
												TopologyKey: os.Getenv("TOPOLOGY_KEY"),
											},
										},
									},
								},
							},
						},
					},
				},
			}

			// Set the job owner reference
			if err := ctrl.SetControllerReference(&instance, job, r.Scheme); err != nil {
				l.Error(err, "unable to set owner reference on job")
				return ctrl.Result{}, err
			}

			if err := r.Create(ctx, job); err != nil {
				l.Error(err, "unable to create job")
				return ctrl.Result{}, err
			}
		}
	}

	return ctrl.Result{RequeueAfter: 1 * time.Minute}, nil
}

func (r *GithubReleaseReconciler) cleanupExternalResources(cr *grmv1alpha1.GithubRelease) error {
	// Delete the job associated with the GithubRelease
	jobName := fmt.Sprintf("%s-job", cr.Name)
	var job batchv1.Job
	err := r.Get(context.TODO(), client.ObjectKey{Namespace: cr.Namespace, Name: jobName}, &job)
	if err != nil {
		return err
	}
	err = r.Delete(context.TODO(), &job)
	if err != nil {
		return err
	}

	return nil
}

func containsString(slice []string, s string) bool {
	for _, item := range slice {
		if item == s {
			return true
		}
	}
	return false
}

func removeString(slice []string, s string) []string {
	var result []string
	for _, item := range slice {
		if item == s {
			continue
		}
		result = append(result, item)
	}
	return result
}

// SetupWithManager sets up the controller with the Manager.
func (r *GithubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&grmv1alpha1.GithubRelease{}).
		Complete(r)
}
