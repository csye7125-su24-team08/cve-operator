/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	grmv1alpha1 "csye7125.local/cve-operator/api/v1alpha1"
)

// GitHubReleasesMonitorReconciler reconciles a GitHubReleasesMonitor object
type GitHubReleasesMonitorReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleasesmonitors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleasesmonitors/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=grm.csye7125.local,resources=githubreleasesmonitors/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubReleasesMonitor object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleasesMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx)

	// Fetch the GitHubReleasesMonitor instance
	var instance grmv1alpha1.GitHubReleasesMonitor
	err := r.Get(ctx, req.NamespacedName, &instance)
	if err != nil {
		l.Error(err, "unable to fetch GitHubReleasesMonitor")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Get releases from the GitHub repository
	releases, err := getReleases(instance.Spec.URL)
	if err != nil {
		l.Error(err, "unable to get releases")
		return ctrl.Result{Requeue: true}, err
	}

	// Get status of the GitHubReleasesMonitor instance
	processedReleases := instance.Status.Releases
	l.Info("GitHubReleasesMonitor processedRelease: ", "processedReleases", processedReleases)

	var processAfter string

	if instance.Spec.MonitorFrom == grmv1alpha1.Now {
		processAfter = time.Now().Format(time.RFC3339)
	} else {
		processAfter = time.Now().Truncate(24 * time.Hour).Format(time.RFC3339)
	}

	processedReleasesMap := make(map[string]struct{})
	for _, release := range processedReleases {
		processedReleasesMap[release] = struct{}{}
	}

	for _, release := range releases {
		if _, ok := processedReleasesMap[release.Name]; !ok && release.CreatedAt > processAfter {
			// TODO: Implement logic to process the release
			processedReleasesMap[release.Name] = struct{}{}
			processedReleases = append(processedReleases, release.Name)
		}
	}

	// Update the status of the GitHubReleasesMonitor instance
	instance.Status.Releases = processedReleases
	instance.Status.LastRun = metav1.Now()
	if instance.Status.MonitorFrom == (metav1.Time{}) {
		if instance.Spec.MonitorFrom == grmv1alpha1.Now {
			instance.Status.MonitorFrom = metav1.Now()
		} else {
			// Set the monitor from time to from today
			instance.Status.MonitorFrom = metav1.NewTime(time.Now().Truncate(24 * time.Hour))
		}
	}
	if err := r.Status().Update(ctx, &instance); err != nil {
		l.Error(err, "unable to update GitHubReleasesMonitor status")
		return ctrl.Result{}, err
	}

	err = r.Get(ctx, req.NamespacedName, &instance)
	if err != nil {
		l.Error(err, "unable to fetch GitHubReleasesMonitor")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	return ctrl.Result{RequeueAfter: 15 * time.Minute}, nil
}

type Release struct {
	Name   string  `json:"name"`
	Assets []Asset `json:"assets"`
}

type Asset struct {
	Name               string `json:"name"`
	BrowserDownloadUrl string `json:"browser_download_url"`
	CreatedAt          string `json:"created_at"`
}

func getReleases(url string) ([]Asset, error) {

	// Implement GitHub API call to fetch releases
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var releases []Release
	if err := json.NewDecoder(resp.Body).Decode(&releases); err != nil {
		return nil, err
	}

	// Filter release based on if the name contains "delta"
	var filteredAssets []Asset
	for _, release := range releases {
		for _, asset := range release.Assets {
			if strings.Contains(asset.Name, "delta") {
				filteredAssets = append(filteredAssets, asset)
			}
		}
	}

	return filteredAssets, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&grmv1alpha1.GitHubReleasesMonitor{}).
		Complete(r)
}
